" Synthentix is an aggregation entity "
type Synthetix @entity {
  id: ID!

  " number of stakers currently staking "
  issuers: BigInt!

  " number of addresses which hold SNX "
  snxHolders: BigInt!
}

" An individual Issuer "
type Issuer @entity {
  id: ID!
}

" An individual SNX holder (always overridden with their latest information) "
type SNXHolder @entity {
  " address of holder "
  id: ID!

  " last block where an event happened "
  block: BigInt!

  " last time where an event happened "
  timestamp: BigInt!

  " current SNX balance of the holder "
  balanceOf: BigDecimal

  # the following will be null before multicurrency (v2) release
  " SNX which is being used for collateral as of last event and cannot be spent "
  collateral: BigDecimal

  " SNX which can be spent as of last event "
  transferable: BigDecimal

  initialDebtOwnership: BigInt

  debtEntryAtIndex: BigInt

  " number of claims performed "
  claims: BigInt

  " number of mints performed "
  mints: BigInt
}

" A historical debt tracker "
type DebtSnapshot @entity {
  id: ID!

  " last block where an event happened "
  block: BigInt!

  " last time when an event happened "
  timestamp: BigInt!

  " address for which these statistics are applicable "
  account: Bytes! # address
  balanceOf: BigDecimal # early on it was possible this wouldn't have a value (pre v2)
  # the following will be null before multicurrency (v2) release

  " SNX which is being used for collateral as of last event and cannot be spent "
  collateral: BigDecimal

  " sUSD of debt as of last event "
  debtBalanceOf: BigDecimal

  " sUSD debt portion a user had at last index "
  initialDebtOwnership: BigDecimal

  " debt entry when `initialDebtOwnership` applies"
  debtEntryAtIndex: BigInt
}

type DailyIssued @entity {
  " unix timestamp at beginning of day of the measurement "
  id: ID!

  " amount issued "
  value: BigDecimal!

  " amount of debt as of the last event for this day "
  totalDebt: BigDecimal!
}

type DailyBurned @entity {
  " unix timestamp at beginning of day of the measurement "
  id: ID!

  " amount burned "
  value: BigDecimal!

  " amount of debt as of the last event for this day "
  totalDebt: BigDecimal!
}

" Tracks this event from various Synth.sol instances "
type Issued @entity {
  id: ID!
  account: Bytes! # address
  value: BigDecimal!
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

" Burned tracks this event from various Synth.sol instances "
type Burned @entity {
  id: ID!
  account: Bytes! # address
  value: BigDecimal! # uint256
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type RewardEscrowHolder @entity {
  " address which holds a rewardescrow "
  id: ID!

  " amount of tokens remaining to be claimed from the escrow "
  balanceOf: BigDecimal!

  " amount of SNX claimed from the escrow "
  vestedBalanceOf: BigDecimal!
}

" Tracks this event from Synthetix.sol "
type FeesClaimed @entity {
  id: ID!
  account: Bytes! # address
  value: BigDecimal! # uint256
  rewards: BigDecimal! # uint256
  block: BigInt!
  timestamp: BigInt!
}

type FeePeriod @entity {
  id: ID!
  startTime: BigInt!
  feesToDistribute: BigDecimal!
  feesClaimed: BigDecimal!
  rewardsToDistribute: BigDecimal!
  rewardsClaimed: BigDecimal!
}

type TotalActiveStaker @entity {
  " single value "
  id: ID!

  " number of stakers seen "
  count: BigInt!
}

type TotalDailyActiveStaker @entity {
  " unix timestamp at beginning of day relevant to this statistic "
  id: ID!

  " unix timestamp as a BigInt (so it can be filtered) "
  timestamp: BigInt!

  " number of stakers seen on this day "
  count: BigInt!
}

type ActiveStaker @entity {
  id: ID!
  " SNX which is being used for collateral as of last event and cannot be spent "
  collateral: BigDecimal

  " sUSD of debt as of last event "
  debtBalanceOf: BigDecimal
}
type SynthByCurrencyKey @entity {
  " currency key "
  id: ID!
  proxyAddress: Bytes!
}

type Synth @entity {
  " lowercase address of the proxy contract for the synth "
  id: ID!
  name: String!
  symbol: String!

  totalSupply: BigDecimal!
}

type SynthBalance @entity {
  " timestamp + account + synth address "
  id: ID!
  amount: BigDecimal!
  address: Bytes!
  account: String! # using a string here because its ID compatible
  timestamp: BigInt!
  synth: Synth
}

" we dont query these entities but only use it to store aggregate data we need during syncing "
type LatestSynthBalance @entity {
  " account + synth address "
  id: ID!
  amount: BigDecimal!
  address: Bytes!
  account: String!
  timestamp: BigInt!
  synth: Synth
}
